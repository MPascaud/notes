bases de données


base
tables
champs, colonnes


SELECT 'Hello World !';


; à la fin

————

commentaires
—-(+espace)
#


————



chaîne de caractères entourée par des apostrophes
\n
\t
\

doubles apostrophes pour en afficher un



CREATE USER 'student'@'localhost' IDENTIFIED BY 'mot_de_passe';
GRANT ALL PRIVILEGES ON elevage.* TO 'student'@'localhost';

mysql -u utilisateur [-h hôte] -p
—>se connecte


SET NAMES 'utf8';
à chaque connexion
mysql -u student -p --default-character-set=utf8
—>utf 8 par défaut



interclassement :
ordre des caractères
sensibilité à la casse





——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

TINYINT 1 octet
SMALLINT 2
MEDIUMINT 3
INT 4
BIGINT 8


mysql sélectionne valeur la plus proche possible


———

UNSIGNED

———

INT(x)
—>précise nombre de chiffres minimum à l’affichage

ZEROFILL ajoute zéros à gauche

INT(4) ZEROFILL

———

valeurs exactes

nombres décimaux

NUMERIC=DECIMAL

NUMERIC(précision)
DECIMAL(5) : 5 chiffres significatifs
NUMERIC(précision, échelle)
DECIMAL(5,3) : 5 chiffres significatifs, 3 chiffres après la virgule



————

valeurs approchées

FLOAT supporte paramètres

REAL (4 octets, mais 8 avec mysql) et DOUBLE (8 octets) supportent pas





—————————

types alphanumériques


CHAR ET VARCHAR entre 1 et 255 caractères
CHAR(x) : toujours x caractères
VARCHAR(x) : jusqu’à x caractères

VARCHAR stocke en plus la taille du texte stocké —> +1 octet que VAR, quand texte=taille max

NB : si caractère accentué UTF-8, un char(5) peut faire plus de 5 octets




——————


TINYTEXT = 2^8 octets(longueur max) = longueur de la chaîne + 1 octet(mémoire occupée)
TEXT / 2^16 / l+2
MEDIUMTEXT / 2^24 / l+3
LONGTEXT / 2^32 / l+4


——————


chaîne de type binaire
->toujours sensible à la casse
->tous les caractères sont utilisables


BINARY(x)
VARBINARY(x)

chaînes plus longues : TINYBLOB, BLOB, MEDIUMBLOB, LONGBLOB


mêmes limites de stockage que les types TEXT


—————

espece ENUM('chat', 'chien', 'tortue')
—> colonne espece peut contenir les chaînes ‘chat’, ‘chien’, ‘tortue’, ’’(si chaîne non autorisée), NULL(si NULL autorisé)



on remplit un ENUM soit avec la valeur, soit avec l’index de la valeur
‘’ correspond à l’index 0


—————


espece SET('chat', 'chien', 'tortue')
->on peut stocker entre 0 et 3 valeurs parmi cette liste


64 valeurs définies max


Pour éviter ENUM : colonne VARCHAR(x) inconvénient : pas de limite de valeurs entrées
Pour éviter SET : une table reprend les catégories, une autre lie références aux catégories


—————


types temporels


DATE, DATETIME, TIME, TIMESTAMP, YEAR


DATE date 'AAAA-MM-JJ' (si AA, entre 1970 et 2069)
TIME heure ‘J HH:MM:SS’ 'MM:SS' HHMMSS(nombre)
DATETIME date + heure AAAAMMJJHHMMSS


YEAR
entre 1901 et 2155
si AA, mêmes critères que DATE et DATETIME(exception : ’00’—>2000, 00—>0000)


TIMESTAMP
stocke le nombre de secondes, mais format est AAAAMMJJHHMMSS (format numérique)
19 janvier 2038 à 3 h 14 min 7 s


————

si date/heure incorrectem valeur par défaut est stockée
(exception, si TIME qui dépasse l’intervalle de validité, remplacé par plus proche (-838:59:59 ou 838:59:59))


———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


éviter mots réservés



——

CREATE DATABASE elevage CHARACTER SET 'utf8';

CREATE DATABASE nom_base;
création


DROP DATABASE elevage;
suppression

DROP DATABASE IF EXISTS elevage;


SHOW WARNINGS;
affiche les warnings


USE elevage
utiliser la base elevage


mysql -u sdz -p elevage
spécifier la base de données sur laquelle on bosse au démarrage



————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


clés primaires


colonne id

PRIMARY KEY(id)

AUTO_INCREMENT


————

ENGINE = moteur de table;

cad ENGINE = INNODB;


CREATE TABLE [IF NOT EXISTS] Nom_table (
    colonne1 description_colonne1,
    [colonne2 description_colonne2,
    colonne3 description_colonne3,
    ...,]
    [PRIMARY KEY (colonne_clé_primaire)]
)
[ENGINE=moteur];


espece VARCHAR(40) NOT NULL,


espece VARCHAR(40) NOT NULL DEFAULT 'chien'


id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT [PRIMARY KEY]



CREATE TABLE Animal (
    id SMALLINT UNSIGNED NOT NULL AUTO_INCREMENT,
    espece VARCHAR(40) NOT NULL,
    sexe CHAR(1),
    date_naissance DATETIME NOT NULL,
    nom VARCHAR(30),
    commentaires TEXT,
    PRIMARY KEY (id)
)
ENGINE=INNODB;


————

SHOW TABLES;

DESCRIBE Animal;


DROP TABLE Animal;


innodb pour relations entre différentes tables


———————————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


ALTER TABLE nom_table ADD ...
ALTER TABLE nom_table DROP ...
ALTER TABLE nom_table CHANGE ...
ALTER TABLE nom_table MODIFY ...


ALTER TABLE nom_table ADD [COLUMN] nom_colonne description_colonne;
—>ajout d’une colonne
si add sans rien, ajout d’une colonne


ALTER TABLE nom_table DROP [COLUMN] nom_colonne;
—>tmtc
idem


ALTER TABLE nom_table CHANGE ancien_nom nouveau_nom description_colonne;
—>change nom colonne


ALTER TABLE nom_table CHANGE ancien_nom nouveau_nom nouvelle_description;
si pas de changement de nom : utiliser deux fois même nom


ALTER TABLE nom_table MODIFY nom_colonne nouvelle_description;


—————————————————————————————————————————————————————————————————————————————————————————————————————————————


insertion de ligne

1)insertion sans préciser les colonnes

INSERT INTO Animal VALUES (1, 'chien', 'M', '2010-04-05 13:43:00', 'Rox', 'Mordille beaucoup');

INSERT INTO Animal VALUES (NULL , 'chat', 'F', '2010-09-13 15:02:00', 'Schtroumpfette', NULL);
—> l’id NULL possible car id est défini comme clé primaire


SELECT * FROM Animal;
—>affichage de la table


2)insertion en précisant les colonnes
INSERT INTO Animal (espece, sexe, date_naissance) VALUES ('tortue', 'F', '2009-08-03 05:12:00');


3)insertion multiple
INSERT INTO Animal (espece, sexe, date_naissance, nom) VALUES ('chien', 'F', '2008-12-06 05:18:00', 'Caroline'), ('chat', 'M', '2008-09-11 15:38:00', 'Bagherra'), ('tortue', NULL, '2010-08-23 05:18:00', NULL);


4)syntaxe alternative déconseillée :
INSERT INTO Animal SET nom='Bobo', espece='chien', sexe='M', date_naissance='2010-07-21 15:41:00';


————

insérer données depuis fichier formaté

SOURCE monFichier.sql;
—>exécuter commandes à partir d’un fichier

———


nom;prenom;date_naissance
Charles;Myeur;1994-12-30
Bruno;Debor;1978-05-12
Mireille;Franelli;1990-08-23

dans un fichier.csv
———

si .csv :

LOAD DATA [LOCAL] INFILE 'nom_fichier'
INTO TABLE nom_table
[FIELDS
    [TERMINATED BY '\t']
    [ENCLOSED BY '']
    [ESCAPED BY '\\' ] —> caractère d’échappement
]
[LINES 
    [STARTING BY '']    
    [TERMINATED BY '\n']
]
[IGNORE nombre LINES]
[(nom_colonne,...)];

local pour spécifier client(local) ou serveur


————


LOAD DATA LOCAL INFILE ‘fichier.csv'
INTO TABLE Personne
FIELDS TERMINATED BY ';'
LINES TERMINATED BY '\n' -- ou '\r\n' selon l'ordinateur et le programme utilisés pour créer le fichier
IGNORE 1 LINES
(nom,prenom,date_naissance);



————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


select


SELECT espece, nom, sexe FROM Animal;
SELECT * from animal;


SELECT * FROM Animal WHERE espece='chien';
SELECT * FROM Animal WHERE date_naissance < '2008-01-01';


SELECT * FROM Animal WHERE sexe='F' AND NOT espece='chien';
not peut se remplacer par !


SELECT * FROM Animal WHERE commentaires IS NOT NULL;
SELECT * FROM Animal WHERE nom <=> NULL; -- sélection des animaux sans nom
SELECT * FROM Animal WHERE nom IS NULL;


—————————————

tri des données

order by quch
SELECT * FROM Animal WHERE espece='chien' ORDER BY date_naissance;

order by quch asc : trier de façon ascendante
order by quch desc : tmtc

possible : ORDER BY espece, date_naissance;


SELECT DISTINCT espece FROM Animal;
—>enlève les doublons

———

LIMIT 6 OFFSET 3;
—> 6 lignes, depuis la 4e
offset est facultatif(défaut : 0)


déconseillé :
SELECT * FROM Animal ORDER BY id LIMIT [decalage, ]nombre_de_lignes;



——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


LIKE ‘b%’
—> toutes les chaînes commençant par ‘b’

LIKE ‘b_’
—> (“ba”, “bf”, “b8”, etc)

'%ch%ne'
'p_rl_'


NOT LIKE


binary
SELECT * FROM Animal WHERE nom LIKE BINARY '%Lu%'; -- sensible à la casse


like utilisable avec les int



————

intervalle

BETWEEN 0 AND 100
BETWEEN 'a' AND 'd'
BETWEEN BINARY 'a' AND BINARY 'd'
NOT BETWEEN


—————

in

SELECT * FROM Animal 
WHERE nom = 'Moka' 
    OR nom = 'Bilba' 
    OR nom = 'Tortilla' 
    OR nom = 'Balou' 
    OR nom = 'Dana' 
    OR nom = 'Redbul' 
    OR nom = 'Gingko';


SELECT * FROM Animal WHERE nom IN ('Moka', 'Bilba', 'Tortilla', 'Balou', 'Dana', 'Redbul', 'Gingko');

——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

sauvegarde

mysqldump -u user -p --opt nom_de_la_base > sauvegarde.sql

mysqldump -u mpascaud -p --opt elevage > elevage_sauvegarde.sql

pour la reprendre :
CREATE DATABASE nom_base
puis : mysql nom_base < chemin_fichier_de_sauvegarde.sql
(en l’occurence : mysql -u mpascaud -p elevage < elevage_sauvegarde.sql)

———


donc pour commandes sql depuis fichier externe :
-source
-load data
- <


———

suppression


DELETE FROM nom_table WHERE critères;
DELETE FROM Animal WHERE nom = 'Zoulou';
s’utilise comme select


———

modification

UPDATE nom_table SET col1 = val1 [, col2 = val2, ...] [WHERE ...];
UPDATE Animal SET sexe='F', nom='Pataude' WHERE id=21;

——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

index


index par la gauche : si on prend des sous-parties sans sauter de colonnes, les index existent déjà

types d’index :

SPATIAL ???

UNIQUE
pour membres
pour combinaison nom + espèce

FULLTEXT
pour char, varchar ou text
on ne peut plus utiliser l’indexage par la gauche —> si recherches fulltext sur deux colonnes, besoin de trois index (col1, col2, col1+col2)


(si index sur BLOB ou TEXT—>préciser nombre caractères à prendre en compte)




———————————

création

INDEX
KEY

ajout pendant création table
méthodes
1)
colonne1 INT KEY,
uniquement key/que unique, sans index ou key/pas index composites/pas sur une partie de la colonne

2)
CREATE TABLE nom_table (
    colonne1 description_colonne1,
    [colonne2 description_colonne2,
    colonne3 description_colonne3,
    ...,]
    [PRIMARY KEY (colonne_clé_primaire)],
    [INDEX [nom_index] (colonne1_index [, colonne2_index, …])]<<<<<<<<<<<<<<<——————————
)
[ENGINE=moteur];

idem pour des index UNIQUE ou FULLTEXT

“utiliser index partout, sauf dans la description même de la colonne(dans ce cas, key)”


————

ajout après la création de la table
alter table = create index



ALTER TABLE nom_table ADD INDEX [nom_index] (colonne_index [, colonne2_index ...]); --Ajout d'un index simple
idem pour fulltext et unique



CREATE INDEX nom_index ON nom_table (colonne_index [, colonne2_index ...]);  -- Crée un index simple

idem pour fulltext



————

Complément pour la création d'un index UNIQUE - le cas des contraintes ???
CONSTRAINT ???

————

suppression d’un index

ALTER TABLE nom_table 
DROP INDEX nom_index;




————————————————

recherches avec fulltext

mot : lettres, chiffres, _ et ‘

mots dans au moins moitié des lignes sont ignorés(règle des 50%)
mots trop courts ignorés
mots trop communs ignorés


————


recherche naturelle

un seul mot suffit

SELECT * FROM nom_table WHERE MATCH(colonne1[, colonne2, ...]) AGAINST ('chaîne recherchée');
SELECT * FROM nom_table WHERE MATCH(colonne1[, colonne2, ...]) AGAINST ('chaîne recherchée' IN NATURAL LANGUAGE MODE);
mais osef de préciser, car recherche naturelle par défaut


affichage pertinence :
SELECT *, MATCH(titre, auteur) AGAINST ('Jules Verne Lune') FROM Livre;


————

recherche avec booléens

pas de règle des 50%
possible sans index fulltext
pas de tri par pertinence par défaut

SELECT * FROM nom_table WHERE MATCH(colonne) AGAINST('chaîne recherchée' IN BOOLEAN MODE);
SELECT * FROM Livre WHERE MATCH(titre) AGAINST ('+bonheur -ogres' IN BOOLEAN MODE);
—> + : on exige qu’il y soit, - : tmtc
SELECT * FROM Livre WHERE MATCH(titre) AGAINST ('"Terre à la Lune"' IN BOOLEAN MODE);
—>groupe de mots
d* —> tous les mots commençant par ‘d’



—————

recherche avec extension de requête

simple recherche naturelle, suivie par seconde recherche naturelle avec les premiers résultats

SELECT * FROM Livre WHERE MATCH(titre, auteur)AGAINST ('Daniel' WITH QUERY EXPANSION);

——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


clés primaires et étrangères

une clé primaire est un index unique, sur une ou plusieurs colonne(s), qui ne peut pas être null

——

à la création de la table

méthode
1)
CREATE TABLE [IF NOT EXISTS] Nom_table (colonne1 description_colonne1 PRIMARY KEY [, colonne2 description_colonne2, colonne3 description_colonne3, ...,]
)
[ENGINE=moteur];

2)
CREATE TABLE [IF NOT EXISTS] Nom_table (
    colonne1 description_colonne1 [,
    colonne2 description_colonne2,
    colonne3 description_colonne3,
    ...],
    [CONSTRAINT [symbole_contrainte]] PRIMARY KEY (colonne_pk1 [, colonne_pk2, ...]))
[ENGINE=moteur];


———

après la création de la table

ALTER TABLE nom_tableADD [CONSTRAINT [symbole_contrainte]] PRIMARY KEY (colonne_pk1 [, colonne_pk2, ...]);
sur colonne qui ne contient pas null
(create index non utilisable pour clés primaires)

———

suppression clés primaires

ALTER TABLE nom_table DROP PRIMARY KEY


———————————————————————————————————————————————————

clés étrangères

FOREIGN KEY : la ou les colonnes sur lesquelles on crée la clé
REFERENCES : la ou les colonnes qui vont servir de référence

————

création avant

CREATE TABLE [IF NOT EXISTS] Nom_table (colonne1 description_colonne1, [colonne2 description_colonne2, colonne3, description_colonne3, ...,]
[ [CONSTRAINT [symbole_contrainte]]  FOREIGN KEY (colonne(s)_clé_étrangère) REFERENCES table_référence (colonne(s)_référence)])
[ENGINE=moteur];

CREATE TABLE Commande (
    numero INT UNSIGNED PRIMARY KEY AUTO_INCREMENT,
    client INT UNSIGNED NOT NULL,
    produit VARCHAR(40),
    quantite SMALLINT DEFAULT 1,
    CONSTRAINT fk_client_numero
	FOREIGN KEY (client)
   	REFERENCES Client(numero) )
ENGINE=InnoDB;

————

création après

ALTER TABLE nom_table ADD CONSTRAINT fk_client_numero FOREIGN KEY (client) REFERENCES Client(numero);


———

suppression clé étrangère

ALTER TABLE nom_table DROP FOREIGN KEY symbole_contrainte

——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

jointures


SELECT Espece.description FROM Espece INNER JOIN Animal ON Espece.id = Animal.espece_id WHERE Animal.nom = 'Cartouche';

SELECT * FROM table1 INNER JOIN table2 ON table1.colonneA = table2.colonneJ AND table1.colonneT = table2.colonneX [AND ...];

———————

alias

mot clé AS

SELECT 5+3 AS Chiots_Cartouche;
(ou SELECT 5+3 Chiots_Cartouche;)



SELECT * FROM A INNER JOIN B ON A.key = B.key
SELECT * FROM A LEFT JOIN B ON A.key = B.key
SELECT * FROM A LEFT JOIN B ON A.key = B.key WHERE B.key IS NULL(left join sans l’intersection de B)
SELECT * FROM A RIGHT JOIN B ON A.key = B.key
SELECT * FROM A RIGHT JOIN B ON A.key = B.key WHERE B.key  IS NULL(tmtc)
SELECT * FROM A FULL JOIN B ON A.key = B.key
SELECT * FROM A FULL JOIN B ON A.key = B.key OR B.key IS NULL


—————

syntaxes alternatives ???


—————

possible de joindre deux tables
exemple :
SELECT Animal.nom as nom_animal, Animal.sexe, Espece.nom_latin as espece, Race.nom as race FROM Animal INNER JOIN Espece ON Animal.espece_id = Espece.id LEFT JOIN Race ON Animal.race_id = Race.id WHERE Espece.nom_courant IN ('Perroquet amazone', 'Chat') ORDER BY Espece.nom_latin, Race.nom;

——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

sous-requêtes


possibles entre autres dans
select
insert
update
delete

jointures sont plus rapides


—————


SELECT MIN(date_naissance)
FROM (
    SELECT Animal.id, Animal.sexe, Animal.date_naissance, Animal.nom, Animal.espece_id
    FROM Animal
    INNER JOIN Espece
        ON Espece.id = Animal.espece_id
    WHERE sexe = 'F'
    AND Espece.nom_courant IN ('Tortue d''Hermann', 'Perroquet amazone')
) AS tortues_perroquets_F;


alias obligatoire

MIN est une fonction qui cherche la valeur minimale d’une colonne.


—————

sous-requête renvoyant une valeur

SELECT id, sexe, nom, commentaires, espece_id, race_id
FROM Animal
WHERE race_id = 
    (SELECT id FROM Race WHERE nom = 'Berger Allemand');


—————

any = some = “au moins une des valeurs”

all = tmtc

attention : [SELECT id FROM Espece WHERE nom_courant = ANY ('Tortue d''Hermann', 'Perroquet amazone’);] est impossible


—————

exists
not exists

SELECT * FROM nom_table WHERE [NOT] EXISTS (sous-requête)

——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

modifications de données


INSERT INTO nom_table [(colonne1, colonne2, ...)] SELECT [colonne1, colonne2, ...] FROM nom_table2 [WHERE ...]


?????
?????
?????

——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

union

SELECT ...
UNION
SELECT ...

yfo même nombre de colonnes

union = union distinct
pour conserver les doublons : union all


————

limit

SELECT id, nom, 'Race' AS table_origine FROM Race LIMIT 3
UNION
SELECT id, nom_latin, 'Espèce' AS table_origine FROM Espece;


SELECT id, nom, 'Race' AS table_origine FROM Race
UNION
(SELECT id, nom_latin, 'Espèce' AS table_origine FROM Espece LIMIT 2);
—>pour limiterla 2e requête ; sinon—>le résultat final est limité


————

order by

SELECT id, nom, 'Race' AS table_origine FROM Race UNION SELECT id, nom_latin, 'Espèce' AS table_origine FROM Espece ORDER BY nom DESC;


——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————

options clés étrangères

ALTER TABLE nom_table
ADD [CONSTRAINT fk_col_ref]         
    FOREIGN KEY (colonne)            
    REFERENCES table_ref(col_ref)
    ON DELETE {RESTRICT | NO ACTION | SET NULL | CASCADE};  



restrict : si on essaie de supprimer une valeur référencée par une clé étrangère : erreur
restrict = no action - dans mysql

set null : null remplace les valeurs dont la référence est supprimée

cascade : supprime toutes les lignes qui référençaient la valeur supprimée


—————

option sur modification des clefs étrangères



ON UPDATE {RESTRICT | NO ACTION | SET NULL | CASCADE}

restrict = no action = empêche modification si elle casse la contrainte

set nul = met null partout où valeur était référencée


——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


violation de contrainte d’unicité ???





——————————————————————————————————————————————————————————————————————————————————————————————————————————————————————


design.google.com




































































































































